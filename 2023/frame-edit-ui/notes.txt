# 2023-08-20
- Refactored into using Components from rojs.
  - All seems to work.
  - this.bundle.thing is a bit verbose compared with Thing (which also got syntax highlighted differently which was nice for seeing external dependency usage).
- Components have a model and a view property.
- Components are now all instances.
- Added bundle pattern inspired by WebAppProvider and SetProvider().
  - All components are given a bundle object which has named references to all components in the bundle.
  - This allows arbitrary interbundle dependencies.
  - Components implement a bundleInit() method for any init work that requires referencing other bundle components.
  - Could maybe use a better name than bundle.
- The separate files to import from in rojs is a bit unfortunate, probably reasonable to have a rojs.js target that exports all the things.
  - Can structure them at a high level and provide documentation that won't get lost among lots of implementation definitions.
  - Done.

# 2023-06-25
- Completed migration into components.
- There a several, now each component is a reasonable scale but the overall directory is now a flat mess.
- Would be good to have some overall structure to the application, MVC was originally going to be it but something more in tune with how the components themselves mesh together might actually work.
- Components:
  - AnimationData
  - FrameViewer
  - DrawingTool
  - ColourPicker
  - StatusText
  - AnimationPlayer
  - FrameControls
- Each of these might get more complex or get siblings, e.g. add PenSizePicker or FramesPerSecondPicker.
- Group into:
  - Animation data.
  - Main viewport.
  - Drawing tools.
  - Shared tool parameters.
  - Animation playback.
  - Keyframe management.
- What would the full animation pack UI be grouped into?
  - Missing parts:
    - Layers.
    - Keyframe lengths.
    - Animation references.
    - Element transforms.
    - Animation library.
    - Animation settings.
  - What UI parts would be present on the screen (possibly minimized)?
    - Main menu.
    - Animation pack library editor.
    - Layer editor.
    - Keyframe editor.
    - Frame editor.
    - Animation properties editor.
    - Editing stack viewer.
    - Tool selection and properties.

# 2023-06-24
- Started migrating code into separate components.
- Using static classes, seems to work well, can use `this` to refer to current class.
- Using model and uiTemplate static members for the model and view parts of each component.

# 2023-06-23
- Having everything partitioned into Model, View and Controller makes each of the three very messy.
- Better to split up by components e.g. frame controls, status bar, colour picker etc.
- Having many little MVC units would be more scalable and manageable.

# 2023-06-18
- Split UI up into Model, View and Controller parts.
- Can see that view.js doesn't import write().
- Fleshed out UI more, added colour buttons.
- Added frame rendering to canvas.
- Added frame button functionality.
- Added drawing.
- Added animation playback.
- Very basic animation frame editor works now.

# 2023-06-16
- Started on the UI using rojs.
- Using new element insertion, needed to fix bug where reparenting left behind stale flatTree data.
- Very basic hello world UI created.

# 2023-06-14
- Experimenting with HTML UI architecture.
- Trying out pure stateless UI to build a frame animation editor.
- Spawned from hex-lines.
- Aiming for an AnimationPack editor one day, aiming lower for this experiment.
  - Just a multi frame single animation editor.
- Data structure:
  - List of frames.
- Controls:
  - CRUD?
    - Create frame.
    - Show frame.
    - Play animation.
    - Seek animation.
    - Update frame.
    - Delete frame.
- Just testing UI, not going to do fancy GPU rendering of points for frames, just store canvases.
- Would like to try adding layers to this next, including a sketch layer that can be drawn to during playback.
- Would like to eventually add auto toggle: https://www.youtube.com/watch?v=56Ui6ljAy3w&t=439s
- UI viewing state has a data structure.
  - struct Model {
      framesPerSecond: u8;
      frames: Array<struct Frame {

      }>;
      player: Option<Player>;
      editor: struct Editor {
        frameIndex: u32;
      };
    }