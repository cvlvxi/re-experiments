# 2024-02-04
- Added error warning for WebGPU initialisation failure.

# 2024-02-01
- Resolving acceleration smoothing for random walk.
  - Thinking the acceleration could be an up down up cubic with 0 points at 0, 0.5 and 1.
    - Used a graphing calculator and ga-expander (to expand x - d translations) to hack figure out the constants by eye.
    - y = 120 * (x^5/20 - x^4/8 + x^3/12)
    - Should try to figure it out algebraically.
    - f''(x) = ax^3 + bx^2 + cx
      f''(0) = 0
      f''(0.5) = 0 = a/8 + b/4 + c/2
      f''(1) = 0 = a + b + c

      f'(x) = ax^4/4 + bx^3/3 + cx^2/2
      f'(0) = 0
      f'(0.5) > 0
      f'(1) = 0 = a/4 + b/3 + c/2

      f(x) = ax^5/20 + bx^4/12 + cx^3/6
      f(0) = 0
      f(1) = 1 = a/20 + b/12 + c/6

      [1/20  1/12  1/6   ][a]   [1]
      [1/4   1/3   1/2   ][b] = [0]
      [1     1     1     ][c]   [0]

      1/20  1/12  1/6   | 1
      1/4   1/3   1/2   | 0
      1     1     1     | 0

      1     1     1     | 0
      1/20  1/12  1/6   | 1
      1/4   1/3   1/2   | 0

      1     1     1     | 0
      0     1/12  1/6   | 1
      0     1/3   1/2   | 0

      1     1     1     | 0
      0     1     2     | 12
      0     1     3/2   | 0

      1     0     1     | -12
      0     1     2     | 12
      0     0     -1/2  | -12

      1     0     1     | -12
      0     1     2     | 12
      0     0     1     | 24

      1     0     0     | 12
      0     1     0     | -12
      0     0     1     | 24

      a = 12
      b = -12
      c = 24
      f(x) = 3/5*x^5 - x^4 + 4*x^3
    - This is not the same answer and is wrong.
    - Tried this again and got the right answer, easier to set a, b, c on f(x) rather than f''(x) but takes a bit more reasoning to know there's only a, b and c.
      - The fact that f'(0) = f''(0) = 0 means there's no d or e constants.
- Updated scoring to just count how many in/out changes there are and weight it quadratically.
- Added seeking origin if lost out in the void or going away from origin if stuck inside.
- Added favouring landing on a different in/out to the start.
- Updated score to have named keys.

# 2024-01-31
- Added 4D rotation of plane.
  - Doesn't work, ends up at 0.
   - Need to check if either of the input directions are 0.
  - Works now.
  - Still has rotational jerk.
  - Probably due to the position wandering algorithm.
    - Need to investigate its derivatives for continuity.

# 2024-01-30
- Reimplemented clicking to go to a place.
  - Should probably dedupe the implementation with SmoothRandomWalk but eh, not setting up dependencies that need maintenance is also nice.
- Still need to compute a nice path to travel along.
  - Added this.
  - Haven't verified the scoring is actually working properly but seems to keep it in the interesting zone.
  - Added scoring to penalise when the nextToPoint is backwards, this should avoid big sweeping changes in direction.
- Added more debugging text.
- Awkward direction discontinuities still happening, need to try out 4D rotation.
- Added a bunch of interesting starting points.

# 2024-01-29
- Started implementing the fly walker.
  - Getting the V1*V2 4D rotation implementation in using the ga-expander.
    - v1 = a*B0 + b*B1 + c*B2 + d*B3;
      v2 = e*B0 + f*B1 + g*B2 + h*B3;
      v1 * v2
    - (a*e + b*f + c*g + d*h) + (a*f + -b*e)*B0*B1 + (a*g + -c*e)*B0*B2 + (a*h + -d*e)*B0*B3 + (b*g + -c*f)*B1*B2 + (b*h + -d*f)*B1*B3 + (c*h + -d*g)*B2*B3
    - Using B0-3 instead of X-W because W sorts before X.
  - Need to get the previous step and the current step to find V1 and V2.
  - Then apply rotation to the plane.
  - Should still clamp plane to be perpendicular to current direction to ensure rotation errors don't accumulate.
  - Clamping ought to rotate anyway wouldn't it?
  - Don't actually need this 4D rotation? Just clamping and normalising constantly?
  - Seems easier as we don't need to keep track of V1 or do any V1*V2 rotation (which requires adjustments to not double rotate).
- Implemented projection based rotation.
  - Projected x and y based on travel direction then projected y based on x.
  - Quite bumpy at times.
  - Don't have travel path optimisation yet, can try to optimise for orthogonal turns to avoid large 180Â° flips.
  - Some of the bumps are probably explained by the arbitrary choice to project y based on x.
  - Maybe try actually implementing the 4D rotation which should put the two vectors in an already correct-ish position and avoid large y project on x corrections.

# 2024-01-11
- Parts of the julia set are tube like.
  - This is an issue when the cross section plane does a rotation it often looks like the image gets stretched out to infinity and back mirrored.
  - This effect is happening too often.
  - Maybe avoid rotating the plane on the spot.
- FlyWalk
  - New motion idea.
  - Fly centre around the space as usual but keep the cross section plane orthogonal to the direction of travel.
    - Should hopfully avoid rotating in place and the tube stretching effect.

# 2024-01-08
- Added 4D random walk.
  - No detection of interesting features.
  - More or less works, has a lot of dead space though.
  - More interesting and dynamic than the trig, can see the plane rotations pretty clearly.
- Stuff TODO:
  - User controls.
    - Click to set next waypoint.
    - Zooming.
      - Scroll wheel and pinch zoom.
  - Colours.
    - Smooth gradient between counts.
    - Colouring the internal space.
    - Cycling the colours over time.
    - Maybe setting colours depending on zoom.
  - Pick next waypoint.
    - At all, need to restructure the wanderers a bit.
    - Based on what looks good.
      - Need to reimplement the shader logic.
      - Need to implement the evaluation algorithm for a sequence of points.
  - Move origin to different parts of the screen.
    - Having the interesting in the middle will probably mean a 50/50 split all the time which might get boring.
    - Can try adding another parameter for where on the screen the "middle" point of the plane is.
  - Add debugging output.
    - Will need to be a second overlay canvas.
    - Hopefully doesn't mess with click events too much, shouldn't be an issue.
- Added colour smoothing.
  - Didn't do sqrt() like in the shadertoy version, maybe doesn't need it?
    - Need to get much more zoomed in to really tell which needs smart waypoint picking and zooming.
  - Tried making the inside black.
    - Avoided too much red but the aliasing at the complex edges wasn't great.
- Should rename ABC to something more meaningful.
  - xDirGuide, yDirGuide, centre.
  - The directions are just guides since they don't need to be normalised and the y guide will change directions to be orthogonal to x.
- Added zoom to uniforms.
  - Had to add padding to make the uniform data 64 bytes, seems to want a multiple of vec4f.
  - WebGPU error messages are very helpful.
- Smart waypointing.
  - One issue is what initial value to use.
  - If path distance is relative to zoom then being zoomed out far enough would let it find an edge to latch onto.
  - How to prevent it from travelling too far?
    - Penalise sum of final lengths if no inside points are found, should direct it back to the origin without missing out on the mandlebrot tip off in the negative real axis.
  - Set up wanderers with a nextToPoint and extracted the smooth point lerping out into a separate function for simulating future trajectories.
  - Added sampling and sampling evaluation.
- Debug output.
  - Added debug rendering of where the wanderers are.
  - Flipped ordering so centre is first (red).
- Controls.
  - Added mouse click to set current position at click spot.
  - Added mouse wheel to zoom.
- Colour smoothing.
  - Added zoom sensitive count divisor to bring out contrast at close zoom levels.

# 2024-01-07
- Got uniform buffer transferring data to GPU, can animate now.
- Extracted WebGPU stuff into separate class.
- Added aspect ratio handling, works very easily.
- Getting ready to do fancy movement stuff.
- Still unsure about constraining it to interesting locations.
- Idea: Click to set next waypoint.

# 2024-01-06
- Added the 4D plane x/y direction.
  - Picking two random 4D unit vectors A and B and making a right angle out of them.
  - A stays put and B gets shifted to be a right angle.
  - B' = normalise(B - A * dot(A, B))
  - Have a C point as the centre around which the plane and rendering happens.
  - Pixel position P = Ax + By + C.
  - P.xy is the initial Z0 value and P.zw is the complex constant to add each iteration.
  - Could have gone through geometric algebra to do fancy 4D plane rotations but picking random points and interpolating between them works well enough.
- Using hard coded ABC values, the image is very stretchy looking, a bit eh TBH.
  - Animates all weird warpy though which is fine.
- How to vary ABC.
  - Want smooth interpolations across a series of random points.
  - Can use the previous two points as influence over the current ones.
  - Just continue the previous trajectory as if nothing changed and smooth interpolate to the new trajectory.
  - Should test out in separate project.

# 2023-12-31
- Added basic mandlebrot rendering in fragment shader.

# 2023-12-30
- Working on basic WebGPU rendering.
  - Following: https://webgpufundamentals.org/webgpu/lessons/webgpu-from-webgl.html
- Trajectory algorithm:
  - First thing to work out.
  - Use a simple mandlebrot.
  - While traversing test various random possible new trajectories from the end point.
  - Will need to make the motion smooth somehow also, trajectories will have to account for existing velocity.
  - Test n points along the random path under consideration.
  - For each score them based on how often the mandlebrot value flips direction.
  - Eg. 1, 3, 6, 4, 5, 2, 8, 0, 1 flips 6 times and would score better than 0, 1, 2, 3, 4, 5, 6, 7 which flips 0 times.
  - The magnitude of the flipping can be tracked e.g. sum of the slopes between each point and used as a tie breaker.


# 2023-12-27
- https://www.shadertoy.com/view/MffGRX
- Want to make a screensaver that traverses z' = z^2 + c.
- Traversal through 4D space: (z0.r, z0.i, c.r, c.i)
- Have the plane of rendering in an arbitrary orientation in that space.
  - Can do fancy 4D rotations with GA.
- Need an algorithm that finds interesting regions to traverse through.
  - Can probe points along a random direction, count the number of times the derivative changes sign, prefer higher.
  - Need to test it out in a simple space.
  - What to do with zoom/rotation?
    - Can probably animate independently from translation.
- Releaning WebGPU.
  - navigator.gpu.requestAdapter().
    - Adapters list features and limits.
    - Can be fallback (probably software).
  - adapter.requestDevice().
    - Device is the device.
    - requestDevice() can specify features and limits required.
  - canvas.getContext('webgpu').configure({device, format: navigator.gpu.getPreferredCanvasFormat()}).
  - Pipeline.
    - Vertex shader.
      - Shader code.
      - Buffers.
    - Primitive options (topology, depth testing, stencilling).
    - Fragment shader.
      - Shader code.
      - Targets with format.
  - Render pass.
    - Color attachments.
      - The textures to write into.
    - Pipeline.
    - Vertex buffers.
    - Draw vertex+instance counts.
  - webgpufundamentals.org exists!
    - https://webgpufundamentals.org/webgpu/lessons/webgpu-fundamentals.html#:~:text=Maybe%20a-,picture,-will%20help.%20Here