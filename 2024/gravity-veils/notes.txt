# 2024-02-19
- Added initial particle values.
  - First action device caused pipeline logic to actually execute, discovered all the compile issues.
  - Fixed errors:
    - Structs don't get constructed like in Rust.
    - Have to use override variables instead of const for pipeline constant overrides.
    - Can't use overrides in array lengths without them being stored in the workgroup which doesn't get connected to a buffer.
    - Storage variables can't be write only, have to be read_write.
    - Pipeline constants have to exist in the shader function to be valid, can't dump all constants in there.

# 2024-02-17
- How to convert the trajectories into a mesh.
  - Discussed the idea with GPT4.
  - Creating individual triangles seems data heavy and cumbersome and hard to track offsets of things in the overall mesh buffer.
  - Using a triangle strip is easier as pairs of positions will work fine, though they do need repeating on the other side but that's probably fine.
    - Using indexed buffers would avoid the duplication but it seems simple enough to not worry about for now.
  - One problem with triangle strips is the zig zag pattern of traversing through trajectories will create joins between the end of one and the start of the other.
    - GPT4 suggested adding degenerate triangles to the end to avoid that.
    - Adding two points that are in the same position such that the next point won't form a visible triangle as the area will be 0.
  - The pattern of converting trajectories to a mesh will not change and does not need to be computed with every frame.
    - Less compute and memory to use a statically computed index buffer.
    - Need to work out the API for it.
- Index buffers
  - Turns out index buffers support restarting the topology sequence by using the max integer value: https://developer.mozilla.org/en-US/docs/Web/API/GPURenderPassEncoder/setIndexBuffer
  - No need to do the repeat existing vertex hack.
- Buffer structure
  - Mass buffer
    - List of {position, mass}.
  - Particle buffer
    - List of {position, velocity, colour}.
  - Trajectory buffer
    - 2D array of {position, colour}.
  - Mesh index buffer
    - Triangle strip indicies into trajectory buffer.
- Worked on writing the pipelines and now need to fill the buffers with initial data.

# 2024-02-06
- Recreation of http://four-venom.glitch.me/ in 3D using WebGPU.
- Use the compute stage to parallelise the computation of many many more points than four-venom which is completely CPU driven.
- Be in space with stars in the background.
- Camera rotating around origin.
- Veils:
  - Veils spawning from origin in different directions.
  - Multiple veils.
  - Use the historical path of a smooth 3D walkers to generate veil points in those directions.
  - Additive colouring.
  - Start and end of veils fade to transparent.
  - Not made up of dots like in four-venom, will be triangles.
- Maybe consider volumes as well as veils.
  - Possibly a separate experiment.
- Architecture:
  - WebGPU shaders.
    - Gravity path compute.
    - Veil rendering.
    - Data buffers between pipeline stages.
    - Blending configuration.
  - Veil directions computation.
    - 3D walker path history.
  - Gravity points over time.
    - Orbiting origin.
    - Fading in and out.
  - Camera orientation.
