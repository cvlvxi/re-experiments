# 2024-04-07
- Recap:
  - Tree of drawing nodes of two types:
    - Layer branch node with alpha transparency and pixelation size.
    - Leaf node with actual image content.
  - Pixelation just takes the max pixelation of all ancestors and self.
  - Alpha works as normal.
- Just implement non-optimal approach with no canvas recycling, all layers are new canvases.
- Got basic alpha and pixelation implementation working.
  - Tried one attempt where the pixelation stacked e.g. pixelSize: 2 + pixelSize: 2 => pixelSize: 4.
  - Probably not practical.
  - Switched to using max pixel size seen in tree branch.
    - Much more intuitive.
    - effectivePixelSize = max(parentPixelSize, nodePixelSize).
    - Layer scale factor = effectivePixelSize / parentPixelSize.
- Seems to work well.
- Switched from emojis to coloured circles.
  - Emoji positioning was too hard to deal with for this.
- Next step: recycling canvases.

# 2024-03-30
- Want to recycle the image buffer for consecutive and nested groups that have the same pixelSize and no alpha/blur.
  - Recycling resources across the drawing tree makes things trickier.
  - Seems similar to the algorithm challenge of before.
- Nested non-one pixelSizes is a bit confusing.
  - Maybe should be treated the same as if each group was rendered to the 100% size canvas at each level?
  - Won't be exactly like that though probably especially with nested group transforming.
  - Maybe take the max ancestral pixelSize for a given group layer?
- Algorithm
  - Continue to have a stack of intermediate image buffers for each group that needs it.
  - Start with the canvas buffer with pixelSize 1.
  - If the child group has transparency or a bigger pixelSize create a new stack entry and draw group into that.
  - After drawing the group leave it for the next drawing to inspect if there's no transparency otherwise render it into the parent and pop it.
    - If the next drawing is a group with no transparency and <= pixelSize then draw its children into the same stack entry.
    - Otherwise render the stack entry into the parent stack entry and pop it and start with a new stack entry if needed.

# 2024-03-29
- Pixelation might make more sense conceptually on the GroupDrawing level like a layer.
  - This fits as an effect pass like opacity.
  - Associating GroupDrawings with effects allows for other things like blur etc.
- Alternate structure:
  - class ImageDrawing {
      emoji: string,
      size: number,
      x: number,
      y: number,
    }
  - class GroupDrawing {
      alpha: number,
      pixelSize: number,
      drawings: Array<Drawing>,
    }
- Add size to ImageDrawing to track what happens to hex line sizes.
- If a GroupDrawing as pixelSize 1 and alpha 1 it can draw its children directly onto the parent buffer.
- What happens when there are nested groups with >1 pixelSizes?
  - Example:
    - Canvas target size 100x100.
    - GroupDrawing{
        pixelSize: 2,
        alpha: 1,
        drawings: [
          GroupDrawing{
            pixelSize: 2,
            alpha: 1,
            drawings: [
              ImageDrawing{
                emoji: 'ðŸ¦–',
                size: 10,
                x: 50,
                y: 50,
              },
            ],
          },
        ],
      }
    - First group buffer size: 50x50.
    - Second group buffer size: 25x25.
    - Emoji size: 2.5.
  - PixelSize causes the group buffer to scale down by the factor and all sizes inside it as well.


# 2024-03-12
- More work on the algorithm implementation.
  - The mergeCanvas stack is only for < 1 alpha groupDrawings.
  - The recursive calls reference indices into the stack rather than objects.
    - Much easier to have unset values.
  - drawDrawing() only does part of the job, the caller needs to composite the results down.
  - The output of a drawDrawing call is either:
    - Nothing being drawn.
    - The pixelationBuffer being drawn to.
    - The mergeBuffer being drawn to and the pixelationBuffer being drawn to.
  - Maybe what was done should be a return value.
    - Return bitset of which buffers were written to.
    - Use this in a common flush method.

# 2024-03-10
- Experimental implementation of algorithm for rendering with transparency and pixelation.
- See hex-lines repo notes for same day.
- Data structures:
  - type Drawing = ImageDrawing | GroupDrawing;
  - class ImageDrawing {
      emoji: string,
      x: number,
      y: number,
      pixelSize: number,
    }
  - class GroupDrawing {
      drawings: Array<Drawing>,
      alpha: number,
    }
- Draw drawing onto canvas with pixelation and transparency rendering.
  - Only ImageDrawing leaf nodes can have pixelation, there's no nesting of pixelation.
  - GroupDrawing has alpha transparency which applies to the final render of its children.
  - Transparency can nest.
  - Pixelation is done by rendering a small image and then blitting it onto the canvas at a larger size using nearest neighbour.
  - Pixelation can be mixed in a render, each image has its own pixelSize.
- Canvases:
  - A merge canvas to hold the rendering of a group to apply transparency on the final result.
  - A pixelation canvas to hold the small renderings of images.
    - Multiple image renders of the same pixelSize can stack on the same pixelation canvas to reduce the number of flushes out to the merge canvas.
- Test page:
  - Half page taken up by fixed size canvas.
  - Other half taken up by textarea with JSON representation of drawing.
    - Changes to the JSON update the canvas rendering live.
  - Use JSON5 actually, JSON sucks to write.
