# 2023-08-30
- Updated to use flat point add method.
  - Marginal improvement.
- Memory allocation:
  - Main allocation is happening in bomber update.
  - This is because we're creating a Vec3 every frame per trail instead of recycling them.
  - Could be improved by using a ring buffer.
  - Probably not that worth it since adding the lines is what dominates (21ms) rather than the update step (2ms).
- Future aspiration:
  - Run computation entirely in WebGPU.
  - Should probably be able to do thousands of bombers.

# 2023-08-29
- Updated to render points directly into the HexLinesHandle3d array buffer.
  - Improved performance substantially, can do 9^3 smoothly on i7 Chromebook now.
  - Nearly smooth on home computer (AMD chip).
  - Still CPU bound.
  - Still seeing heap allocations.
  - Should try making the addPoint() function not use destructuring.

# 2023-08-28
- Memory analysis.
  - Dev tools performance tab and memory tab good to spotting memory allocations.
  - Fixed up memory leak in Quat.
  - Removed use of enumerate() as that was consuming memory too.
- Confetti
  - Fixed the confetti bug.
  - It was because we were preallocating the GPU buffer size but while iterating we omitted lines with 0 width, leaving them as is which contained old state.
  - Once the bombers built their full trail the 0 width lines were in a constistent spot and those hex lines would never update.

# 2023-08-27
- Updated to use hex-lines-3d.js.
  - Works!
  - Flipped the bomber angle to match flipped Y axis.
  - TODO:
    - Camera transform now needs to output a matrix.
      - There's no matrix code here so that'll be fun to write from scratch.
  - Hacked a hard coded camera transform in there, works pretty well actually lol.
  - Bumped up the number keys to do n^3.
  - Computer can handle hundreds of bombers now.
  - Got glitches when switching out bombers, seems like stale line segments are hanging around, may be an issue with the line pool.

# 2023-08-26
- Want to redo this using a 3D version of hex-lines.
  - Won't keep this version around, just upgrade in place once it exists.

# 2023-08-25
- Fixed f32 NaN colour issue in hex-lines library.
  - Rebased drawing implementation onto it.
  - Works fine in Firefox now.

# 2023-08-24
- Copied from bomber.
- Intended to rewrite the drawing module to use https://github.com/randfur/hex-lines.
- Used to test out using the library and also hopefully improve the performance significantly (it struggles on mobile).
- Finished implementation.
  - Had to replace CSS string colour with RGBA.
  - Replacing 2D canvas rendering was not hard at all, no major refactoring required.
  - Found antialiasing was really needed to avoid the ground dots from popping in and out constantly, added that as a parameter in the library.
- Playing around with pixelSize.
  - Pixel size 6 looks good after increasing the width of everything in the scene.
  - Pixel size 1 is the best because anything above 1 has flickering in the ground background sadly, would prefer to have 6.
- 10 bombers runs smoothly on phone yay.
- Updated number keys to spawn n^2 bombers.
  - Home computer with 1060 card stuggles on 7^2 bombers.
  - DevTools performance tab points at the sorting taking up the most time along with line transforming taking up a lot as well.
  - If this was using a depth buffer then that would be much less of an issue.
    - A 3D version of hex-lines would be the right solution here.
