# 2023-08-27
- Updated to use hex-lines-3d.js.
  - Works!
  - Flipped the bomber angle to match flipped Y axis.
  - TODO:
    - Camera transform now needs to output a matrix.
      - There's no matrix code here so that'll be fun to write from scratch.
  - Hacked a hard coded camera transform in there, works pretty well actually lol.
  - Bumped up the number keys to do n^3.
  - Computer can handle hundreds of bombers now.
  - Got glitches when switching out bombers, seems like stale line segments are hanging around, may be an issue with the line pool.

# 2023-08-26
- Want to redo this using a 3D version of hex-lines.
  - Won't keep this version around, just upgrade in place once it exists.

# 2023-08-25
- Fixed f32 NaN colour issue in hex-lines library.
  - Rebased drawing implementation onto it.
  - Works fine in Firefox now.

# 2023-08-24
- Copied from bomber.
- Intended to rewrite the drawing module to use https://github.com/randfur/hex-lines.
- Used to test out using the library and also hopefully improve the performance significantly (it struggles on mobile).
- Finished implementation.
  - Had to replace CSS string colour with RGBA.
  - Replacing 2D canvas rendering was not hard at all, no major refactoring required.
  - Found antialiasing was really needed to avoid the ground dots from popping in and out constantly, added that as a parameter in the library.
- Playing around with pixelSize.
  - Pixel size 6 looks good after increasing the width of everything in the scene.
  - Pixel size 1 is the best because anything above 1 has flickering in the ground background sadly, would prefer to have 6.
- 10 bombers runs smoothly on phone yay.
- Updated number keys to spawn n^2 bombers.
  - Home computer with 1060 card stuggles on 7^2 bombers.
  - DevTools performance tab points at the sorting taking up the most time along with line transforming taking up a lot as well.
  - If this was using a depth buffer then that would be much less of an issue.
    - A 3D version of hex-lines would be the right solution here.
