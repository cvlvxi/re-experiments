# 2024-01-19
- Implemented token parsing into AST.
  - Works.
  - Expressions are sums of products.
  - Product terms are either base case idents/numbers or another sum nested in parens/function.
  - Using the '()' function to mean bare parenthesis.
- Implemented assignment inlining.
  - Initially had cycle detection but the inlining algorithm could already detect it.
  - Algorithm is not efficient as it redundantly re-inlines already known assignments but works.
  - Dumb implementation is very simple.
  - Would be easy to add memoisation of input sums.

# 2024-01-19
- Working on AST parser.
  - Defined datatype in TypeScript.
  - Also for Tokens.

# 2024-01-18
- Working on parser tokeniser.
  - Tokeniser deals with brackets and creates tree of nesting.
  - Seems to be working.
  - Simple token forms:
    - Ident
    - Function
    - Bracketed expression
    - Symbol
- Next is to turn into AST.
  - High level form:
    - Split by ; into assignments and expression.
    - Split assignment by = for name and expression.
      - Should check that assignments aren't circularly dependant.
    - Split expressions by addition into products.
    - Split products into numbers and idents.
- Next expand all assigned idents.
- Next categorise remaining idents into scalars and basis vectors.
- Next fully expand expression.
- Next make basis multivectors canonical.
- Next dedupe common basis multivectors.

# 2024-01-11
- Want to do rotations in 4D space.
  - Want to rotate by a rotor4.
  - Involves many many terms to figure out.
  - Probably still faster to compute by hand but an expander tool is more fun probably.
- Expander tool.
  - Will take a list of let assignments and an expression to expand.
  - End result should be a single multivector.
- Parsing strings.
  - Hardest part probably.
  - How to distinguish scalars from bases?
    - Have scalars lowercase and basis uppercase.
    - Example: (aX + bY + cZ) * (dY  + eY + fZ)
  - Also need conj().
  - Tokeniser.
    - If letters then ( treat as function open.
    - If letters then anything else treat as multiplied letters.
    - Let names must be single lowercase character.
    - Will run out of letters probably, allow numbers after single scalar letter also.
    - Can apply to basis uppercase letters also why not.


