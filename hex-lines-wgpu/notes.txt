# 2023-08-05
- Forked this project idea. This is now called hex-lines-wgpu and the fork is hex-lines-webgl.
- Redoing this concept in hex-lines-webgl because WebGPU support is far from widespread.
  - Many people don't use Chrome.
  - Even on Chrome, Android, Linux and configurations of ChromeOS don't work with WebGPU.

# 2023-06-12
- Frame editing UI.
  - How to use rojs?
  - Can MVC the UI?
  - How to make rojs MVC componentised instead of different parts all split up into separate M, V and C sections?
  - Would become an MVC joining framework.
    - A bit heavyweight.
  - What if just canvas UI, pure drawing no state?
    - Should be able to do that with rojs anyway if used in the right way.
    - No need for references to UI elements via IDs if UI has no state.
  - What if keyboard controls only?
    - Can have a cursor to traverse the animation pack data structure.
    - Can show keyboard controls always.
    - Use a similar system to https://github.com/randfur/notes-graph ?
    - Controls conditions got messy as more controls were added, maybe a lifetime system would be better.
    - Maybe a key collision disambiguation system would be good to not have to think about collisions.
  - Should fork off as a different experiment, this one is in a good state to reference.
    - Started frame-edit-ui, will try using rojs in a pure stateless UI way for a very basic multi frame animation editor.

# 2023-06-10
- Added size and colour to all points.
  - WGSL doesn't support u8.
  - Packed the rgb and size values into a u32 for size efficiency.
  - Originally used a Uint8Array to set the bytes individually.
  - WGSL seems to be little endian which messed with the ordering of the u8s.
  - Used Uint32Array instead with bit shifting instead to be endian agnostic.
- Copying from one ArrayBuffer to another is ugly.
  - new Uint8Array(pointsBuffer.getMappedRange()).set(new Uint8Array(points));

# 2023-06-07
- Updated star to be hexagon.
  - Less overdraw.
  - Same number of triangles.
  - Renamed from star-lines to hex-lines.
- Added gap.
  - Using special gapNumber sentinal 12345678.
  - Added rendering of hex cap before the gap.
  - Added gap at end of points to cap of end of line.
  - Using select(f, t, b) instead of an if to avoid branching.

# 2023-06-04
- Decided to detect in the vertex shader which angle the line body should be instead of drawing redundant overdraws doing every different angle.
- Maybe don't need to draw the point at all, just the line body.
- Made a cool looking red rune thing, forked it off as 'runes'.
- Drew the star lines.
- Using a const coefficients array instead of a locally scoped array.
  - Saves having to compute redundant vertices per vertex.
  - Seems like a useful general pattern.

# 2023-06-03
- Switched to hard coded triangle vertices in the vertex code.
  - Avoids needing a compute pass to generate the vertices.
- Got something rendering.

# 2023-05-05
- Goal:
  - Take as input Array<Array<{colour: vec3, size: number, points: Array<vec2>}>>.
  - Draw a diamond at each point and two rectangles joining the diamonds, see lines.png for diagram.
  - Use WebGPU to do it.
  - Use compute to generate the triangles from the raw input.
  - Generate lots of these as an animation on the CPU, upload all the frame data to the GPU and render the animation.
