# 2023-10-21
- Objective: Turn an orientation about its local co-ordinate basis vectors.
  - Rotate global basis vectors by orientation before rotating orientation around basis vector.
  - Quaternion method:
    - rotation quaternion = cos(a/2) + sin(a/2) * (xi + yj + zk)
    - rotated orientation quaternion = orientation quaternion * rotation quaternion
    - oriented vector = conjugate(orientation quaternion) * (vector.x * i + vector.y * j + vector.z * k) * orientation quaternion
    - Quaternion multiplication:
      - (a + bi + cj + dk) * (e + fi + gj + hk)
      - ae + afi + agj + ahk +
        bei + bfii + bgij + bhik +
        ceji + cfji + cgjj + chjk +
        dek + dfki + dgkj + dhkk
      - ae + afi + agj + ahk +
        bei + -bf + bgk + -bhj +
        cej + -cfk + -cg + chi +
        dek + dfj + -dgi + -dh
      - (ae - bf - cg - dh) +
        i * (af + be + ch - dg) +
        j * (ag - bh + ce + df) +
        k * (ah + bg - cf + de)
  - GA method:
    - Rotation no longer around a axis vector but instead from one vector to another vector.
  - Quaternions in GA:
    - Wiki says that you can use i = xy, j = xz, k = yz which works equivalently to quaternions.
    - I want j to be zx instead of xz to maintain the symmetry of rotating from the next basis vector to the one after (with wrapping).
    - ChatGPT suggested that using j = xz vs j = zx doesn't matter because the negation cancels out in the end.
    - Try quaternion multiplication with negated j:
      - (a + bi - cj + dk) * (e + fi - gj + hk)
      - ae + afi + -agj + ahk +
        bei + bfii + -bgij + bhik +
        -cej + -cfji + cgjj + -chjk +
        dek + dfki + -dgkj + dhkk
      - ae + afi + -agj + ahk +
        bei + -bf + -bgk + -bhj +
        -cej + cfk + -cg + -chi +
        dek + dfj + dgi + -dh
      - (ae - bf - cg - dh) +
        i * (af + be - ch + dg) +
        -j * (ag + bh + ce - df) +
        k * (ah - bg + cf + de)
    - Turns out it's not the same, maybe it becomes equivalent with more multiplications when doing the full rotations.
    - Needs testing out.
  - Construction equivalence.
    - Constructing a quaternion from axis angle and a rotor from a matching vector to vector produces the same values if you map i = yz, j = zx, k = xy.
    - Code:
      function rotate(v) {
        return rotateY(rotateX(v, 1), 2);
      }
      console.log(quaternionFromAxisAngle(rotate([0, 0, 1]), TAU / 4));
      // [0.7071067811865476, -0.34739837709480914, 0.5950098395293859, -0.1589894916499427]
      console.log(rotorFromVectorToVector(rotate([1, 0, 0]), rotate([0, 1, 0])));
      // [0.7071067811865475, -0.34739837709480914, 0.5950098395293859, -0.1589894916499427]
  - Quaternions don't follow GA rules.
    - Given i is yz, j is zx and k is xy; ij should = -k not k.
    - Ditch quaternions and just use yz, zx and xy coefficients.


